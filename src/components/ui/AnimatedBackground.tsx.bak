'use client';

import React, { useEffect, useRef, useState } from 'react';

// Animation stages as numbers for simplicity
const STAGE_DATA_COLLECTION = 0;
const STAGE_ANALYSIS = 1;
const STAGE_VISUALIZATION = 2;
const STAGE_INSIGHTS = 3;

// Define our Particle type at the top level for global access
class Particle {
  x: number = 0;
  y: number = 0;
  z: number = 0;
  targetX: number = 0;
  targetY: number = 0;
  vx: number = 0;
  vy: number = 0;
  hue: number = 0;
  saturation: number = 0;
  lightness: number = 0;
  baseSize: number = 0;
  size: number = 0;
  dataValue: number = 0;
  trail: Array<{ x: number, y: number, size: number, opacity: number }> = [];
  explosionAngle: number = 0;
  explosionSpeed: number = 0;
  explosionDecay: number = 1;
  glowIntensity: number = 0;
  glowDecay: number = 0.98;
  isHighlight: boolean = false;
  uniqueOffset: number = 0;
  
  constructor(x?: number, y?: number, dataValue?: number, isHighlight?: boolean) {
    if (x !== undefined) this.x = x;
    if (y !== undefined) this.y = y;
    if (dataValue !== undefined) this.dataValue = dataValue;
    if (isHighlight !== undefined) this.isHighlight = isHighlight;
  }
  
  setTarget(x: number, y: number) {
    this.targetX = x;
    this.targetY = y;
  }
  
  explode() {
    this.explosionAngle = Math.random() * Math.PI * 2;
    this.explosionSpeed = this.isHighlight 
      ? 8 + Math.random() * 7
      : 5 + Math.random() * 5;
    this.explosionDecay = 0.94 + Math.random() * 0.03;
    this.glowIntensity = 1.0;
  }
  
  update(time: number, currentStage: number, width: number, height: number, 
    particles: Particle[], mousePos: {x: number, y: number} | null, stageTransitionRef?: React.MutableRefObject<boolean>) {
    return;
  }
  
  addTrailPoint(baseOpacity: number) {
    return;
  }
  
  draw(ctx: CanvasRenderingContext2D, time: number) {
    return;
  }
}

interface AnimatedBackgroundProps {
  className?: string;
}

// Enhanced base colors for better branding alignment
const BASE_COLORS = {
  blue: { h: 210, s: 85, l: 60 },  // Vibrant blue
  teal: { h: 170, s: 80, l: 55 },  // Balanced teal
  accent: { h: 190, s: 90, l: 65 } // Ocean blue accent
};

const AnimatedBackground: React.FC<AnimatedBackgroundProps> = ({ className = '' }) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [stage, setStage] = useState<number>(STAGE_DATA_COLLECTION);
  const requestRef = useRef<number | undefined>(undefined);
  // Using proper types for our particle references
  const particlesRef = useRef<Particle[]>([]);
  const highlightParticlesRef = useRef<Particle[]>([]);  // New highlight particles for visual interest
  const stageTimeRef = useRef<number>(0);
  const previousTimeRef = useRef<number>(0);
  const stageTransitionRef = useRef<boolean>(false);
  const mousePosition = useRef<{x: number, y: number} | null>(null);
  
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Track mouse position for interactive effects
    const handleMouseMove = (e: MouseEvent) => {
      const rect = canvas.getBoundingClientRect();
      mousePosition.current = {
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      };
    };
    
    const handleMouseLeave = () => {
      mousePosition.current = null;
    };
    
    // Resize canvas to fill window
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      
      // Regenerate positions when resizing
      if (particlesRef.current.length > 0) {
        generateShapeForStage(stage, particlesRef.current, canvas.width, canvas.height);
      }
    };
    
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('mouseleave', handleMouseLeave);
    
    // Enhanced Particle class with improved visual effects
    class ParticleImplementation extends Particle {
      constructor(x: number, y: number, dataValue: number, isHighlight: boolean = false) {
        super();
        this.x = x;
        this.y = y;
        this.z = Math.random() * 3 + 0.5; // 0.5 to 3.5 for enhanced parallax depth
        this.targetX = x;
        this.targetY = y;
        this.dataValue = dataValue;
        this.isHighlight = isHighlight;
        this.uniqueOffset = Math.random() * 100; // Used for varied animation timing
        
        // More vibrant color scheme with wider range
        // Primary particles use brand colors (blue to teal)
        if (!isHighlight) {
          // Map data value to the color spectrum between blue and teal
          const blendFactor = Math.pow(dataValue / 100, 1.2); // Non-linear distribution favoring blues
          this.hue = BASE_COLORS.blue.h + blendFactor * (BASE_COLORS.teal.h - BASE_COLORS.blue.h);
          this.saturation = 70 + Math.random() * 25; 
          this.lightness = 50 + Math.random() * 25;
        } 
        // Highlight particles are accent colors with more variance
        else {
          this.hue = BASE_COLORS.accent.h + (Math.random() * 30 - 15);
          this.saturation = 90 + Math.random() * 10;
          this.lightness = 60 + Math.random() * 15;
        }
        
        // Larger highlight particles
        this.baseSize = isHighlight 
          ? 4 + (dataValue / 15) 
          : 2 + (dataValue / 20);
        this.size = this.baseSize;
      
      constructor(x: number, y: number, dataValue: number, isHighlight: boolean = false) {
        this.x = x;
        this.y = y;
        this.z = Math.random() * 3 + 0.5; // 0.5 to 3.5 for enhanced parallax depth
        this.targetX = x;
        this.targetY = y;
        this.dataValue = dataValue;
        this.isHighlight = isHighlight;
        this.uniqueOffset = Math.random() * 100; // Used for varied animation timing
        
        // More vibrant color scheme with wider range
        // Primary particles use brand colors (blue to teal)
        if (!isHighlight) {
          // Map data value to the color spectrum between blue and teal
          const blendFactor = Math.pow(dataValue / 100, 1.2); // Non-linear distribution favoring blues
          this.hue = BASE_COLORS.blue.h + blendFactor * (BASE_COLORS.teal.h - BASE_COLORS.blue.h);
          this.saturation = 70 + Math.random() * 25; 
          this.lightness = 50 + Math.random() * 25;
        } 
        // Highlight particles are accent colors with more variance
        else {
          this.hue = BASE_COLORS.accent.h + (Math.random() * 30 - 15);
          this.saturation = 90 + Math.random() * 10;
          this.lightness = 60 + Math.random() * 15;
        }
        
        // Larger highlight particles
        this.baseSize = isHighlight 
          ? 4 + (dataValue / 15) 
          : 2 + (dataValue / 20);
        this.size = this.baseSize;
      }
      
      setTarget(x: number, y: number) {
        this.targetX = x;
        this.targetY = y;
      }
      
      explode() {
        this.explosionAngle = Math.random() * Math.PI * 2;
        this.explosionSpeed = this.isHighlight 
          ? 8 + Math.random() * 7
          : 5 + Math.random() * 5;
        this.explosionDecay = 0.94 + Math.random() * 0.03;
        this.glowIntensity = 1.0; // Full glow during explosion
      }
      
      update(time: number, currentStage: number, width: number, height: number, particles: Particle[], mousePos: {x: number, y: number} | null) {
        // Handle explosion effect
        if (this.explosionSpeed > 0.1) {
          this.x += Math.cos(this.explosionAngle) * this.explosionSpeed;
          this.y += Math.sin(this.explosionAngle) * this.explosionSpeed;
          this.explosionSpeed *= this.explosionDecay;
          
          // Boundary check during explosion with bounce effect
          if (this.x < 0) { 
            this.x = 0; 
            this.explosionAngle = Math.PI - this.explosionAngle;
          }
          if (this.x > width) { 
            this.x = width; 
            this.explosionAngle = Math.PI - this.explosionAngle;
          }
          if (this.y < 0) { 
            this.y = 0;
            this.explosionAngle = -this.explosionAngle;
          }
          if (this.y > height) { 
            this.y = height;
            this.explosionAngle = -this.explosionAngle;
          }
          
          // Add trail points during explosion with higher frequency
          if (Math.random() > (this.isHighlight ? 0.3 : 0.5)) {
            this.addTrailPoint(this.isHighlight ? 0.9 : 0.7);
          }
        } else {
          // Normal movement toward target with smooth interpolation
          const dx = this.targetX - this.x;
          const dy = this.targetY - this.y;
          
          // Variable speed based on distance and stage
          let speed = 0.03;
          
          // Higher speed during stage transitions
          if (stageTransitionRef.current) {
            speed = 0.08;
          }
          
          // Apply z-index to create parallax effect on movement speed
          speed = speed / this.z;
          
          this.vx = dx * speed;
          this.vy = dy * speed;
          
          // Mouse interaction - attraction or repulsion
          if (mousePos) {
            const mdx = mousePos.x - this.x;
            const mdy = mousePos.y - this.y;
            const mdist = Math.sqrt(mdx * mdx + mdy * mdy);
            
            // Mouse interaction radius
            const mouseRadius = 150;
            
            if (mdist < mouseRadius) {
              const force = ((mouseRadius - mdist) / mouseRadius) * 0.05;
              
              // Highlight particles are attracted, regular ones are repulsed
              const modifier = this.isHighlight ? 1 : -1;
              
              this.vx += (mdx / mdist) * force * modifier;
              this.vy += (mdy / mdist) * force * modifier;
              
              // Highlight particles glow when near mouse
              if (this.isHighlight && mdist < mouseRadius * 0.5) {
                this.glowIntensity = (1 - mdist / (mouseRadius * 0.5)) * 0.8;
              }
            }
          }
          
          // Apply repulsion from nearby particles of same type
          for (const p of particles) {
            if (p !== this && p.isHighlight === this.isHighlight) {
              const repelDx = this.x - p.x;
              const repelDy = this.y - p.y;
              const distance = Math.sqrt(repelDx * repelDx + repelDy * repelDy);
              
              const repelDistance = this.isHighlight ? 30 : 20;
              
              if (distance < repelDistance) {
                const repelForce = (repelDistance - distance) * (this.isHighlight ? 0.004 : 0.003);
                this.vx += repelDx * repelForce / (distance || 1);
                this.vy += repelDy * repelForce / (distance || 1);
              }
            }
          }
          
          this.x += this.vx;
          this.y += this.vy;
          
          // Add trail based on stage and particle type
          const trailChance = this.isHighlight 
            ? (currentStage === STAGE_VISUALIZATION ? 0.1 : 0.2)
            : (currentStage === STAGE_DATA_COLLECTION ? 0.3 : 0.4);
          
          if (Math.random() > trailChance) {
            this.addTrailPoint(this.isHighlight ? 0.5 : 0.3);
          }
        }
        
        // Update trail opacity - faster fading for regular particles
        for (let i = this.trail.length - 1; i >= 0; i--) {
          const fadeRate = this.isHighlight ? 0.02 : 0.03;
          this.trail[i].opacity -= fadeRate;
          if (this.trail[i].opacity <= 0) {
            this.trail.splice(i, 1);
          }
        }
        
        // Decay glow effect
        if (this.glowIntensity > 0) {
          this.glowIntensity *= this.glowDecay;
          if (this.glowIntensity < 0.01) this.glowIntensity = 0;
        }
        
        // Enhanced pulse effect based on time, data value and unique offset
        const pulseSpeed = 0.002;
        const timeOffset = this.uniqueOffset * 0.01;
        const pulseAmount = this.isHighlight 
          ? this.dataValue / 15 
          : this.dataValue / 30;
        
        this.size = this.baseSize + 
          Math.sin((time + timeOffset) * pulseSpeed * (this.dataValue / 20 + 0.5)) * pulseAmount;
      }
      
      addTrailPoint(baseOpacity: number) {
        // Trail length depends on explosion, stage, or highlight status
        let maxTrailLength = this.explosionSpeed > 0.1 ? 8 : 5;
        
        // Longer trails for highlight particles and during data collection
        if (this.isHighlight) maxTrailLength += 3;
        if (stage === STAGE_DATA_COLLECTION) maxTrailLength += 2;
                          
        if (this.trail.length < maxTrailLength) {
          this.trail.push({
            x: this.x,
            y: this.y,
            size: this.size * 0.7,
            opacity: baseOpacity + Math.random() * 0.2
          });
        }
      }
      
      draw(ctx: CanvasRenderingContext2D, time: number) {
        // Draw trail with enhanced gradient effect
        for (let i = 0; i < this.trail.length; i++) {
          const t = this.trail[i];
          ctx.beginPath();
          ctx.arc(t.x, t.y, t.size, 0, Math.PI * 2);
          
          // Progressive hue shift along the trail for highlight particles
          let trailHue = this.hue;
          if (this.isHighlight) {
            // Shift by up to 20 degrees along trail
            trailHue += (i / this.trail.length) * 20;
          }
          
          ctx.fillStyle = `hsla(${trailHue}, ${this.saturation}%, ${this.lightness}%, ${t.opacity})`;
          ctx.fill();
        }
        
        // Draw main particle with enhanced glow effect
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        
        // Dynamic glow effect 
        const shouldGlow = this.isHighlight || 
                        this.dataValue > 75 || 
                        this.explosionSpeed > 0.1 ||
                        this.glowIntensity > 0;
                        
        if (shouldGlow) {
          // Calculate glow strength
          const glowStrength = this.isHighlight 
            ? 0.7 + this.glowIntensity * 0.3
            : 0.4 + this.glowIntensity * 0.6;
            
          const glowSize = this.isHighlight ? this.size * 3 : this.size * 2;
          const lightnessBump = this.isHighlight ? 30 : 20;
          
          const glow = ctx.createRadialGradient(
            this.x, this.y, 0,
            this.x, this.y, glowSize
          );
          glow.addColorStop(0, `hsla(${this.hue}, ${this.saturation}%, ${this.lightness + lightnessBump}%, ${glowStrength})`);
          glow.addColorStop(1, `hsla(${this.hue}, ${this.saturation}%, ${this.lightness}%, 0)`);
          
          ctx.fillStyle = glow;
          ctx.globalCompositeOperation = 'lighter';
          ctx.fill();
          ctx.globalCompositeOperation = 'source-over';
        }
        
        // Draw the main particle body
        ctx.fillStyle = `hsl(${this.hue}, ${this.saturation}%, ${this.lightness}%)`;
        ctx.fill();
      }
    }
    
    // Generate shapes based on the current animation stage
    function generateShapeForStage(stage: number, particles: Particle[], width: number, height: number) {
      const centerX = width / 2;
      const centerY = height / 2;
      const maxRadius = Math.min(width, height) * 0.4;
      
      switch (stage) {
        case STAGE_DATA_COLLECTION: // Enhanced scattered points with dynamic clusters
          particles.forEach(p => {
            let angle, radius;
            if (Math.random() > (p.isHighlight ? 0.5 : 0.3)) {
              // Create varied clusters
              const clusterCount = p.isHighlight ? 3 : 5;
              const clusterIndex = Math.floor(Math.random() * clusterCount);
              const clusterAngle = (Math.PI * 2 / clusterCount) * clusterIndex;
              const clusterDist = p.isHighlight ? 0.6 : 0.5;
              const clusterX = centerX + Math.cos(clusterAngle) * (maxRadius * clusterDist);
              const clusterY = centerY + Math.sin(clusterAngle) * (maxRadius * clusterDist);
              
              angle = Math.random() * Math.PI * 2;
              radius = Math.random() * (maxRadius * (p.isHighlight ? 0.5 : 0.4));
              p.setTarget(
                clusterX + Math.cos(angle) * radius,
                clusterY + Math.sin(angle) * radius
              );
            } else {
              // Random scattered position with wider distribution for highlight particles
              angle = Math.random() * Math.PI * 2;
              radius = Math.random() * maxRadius * (p.isHighlight ? 1.1 : 0.9);
              p.setTarget(
                centerX + Math.cos(angle) * radius,
                centerY + Math.sin(angle) * radius
              );
            }
          });
          break;
          
        case STAGE_ANALYSIS: // Enhanced grid pattern with offset for highlight particles
          const gridSize = Math.ceil(Math.sqrt(particles.filter(p => !p.isHighlight).length));
          const cellWidth = Math.min(width, height) * 0.7 / gridSize;
          const startX = centerX - (cellWidth * gridSize) / 2;
          const startY = centerY - (cellWidth * gridSize) / 2;
          
          particles.forEach((p, i) => {
            if (p.isHighlight) {
              // Highlight particles form a circular pattern around the grid
              const highlightAngle = (i % 20) * (Math.PI * 2 / 20);
              const highlightRadius = maxRadius * 0.7;
              p.setTarget(
                centerX + Math.cos(highlightAngle) * highlightRadius,
                centerY + Math.sin(highlightAngle) * highlightRadius
              );
            } else {
              // Regular particles form the grid
              const gridIndex = particles.filter(dp => !dp.isHighlight).indexOf(p);
              const gridX = gridIndex % gridSize;
              const gridY = Math.floor(gridIndex / gridSize);
              p.setTarget(
                startX + gridX * cellWidth + cellWidth / 2,
                startY + gridY * cellWidth + cellWidth / 2
              );
            }
          });
          break;
          
        case STAGE_VISUALIZATION: // Enhanced circular chart with dynamic sizing
          particles.forEach((p, i) => {
            if (p.isHighlight) {
              // Highlight particles form inner orbital rings
              const ringCount = 2;
              const ringIndex = i % ringCount;
              const ringRadius = maxRadius * (0.25 + ringIndex * 0.15);
              const angleOffset = ringIndex * (Math.PI / 12);
              const particlesPerRing = Math.floor(p.isHighlight ? 8 : 12);
              const angleStep = (Math.PI * 2) / particlesPerRing;
              const angle = angleStep * (i % particlesPerRing) + angleOffset;
              
              p.setTarget(
                centerX + Math.cos(angle) * ringRadius,
                centerY + Math.sin(angle) * ringRadius
              );
            } else {
              // Regular particles form the main data visualization circle
              const slice = particles.filter(dp => !dp.isHighlight).length;
              const angle = (Math.PI * 2 / slice) * particles.filter(dp => !dp.isHighlight).indexOf(p);
              const radius = maxRadius * (0.4 + (p.dataValue / 100) * 0.6);
              p.setTarget(
                centerX + Math.cos(angle) * radius,
                centerY + Math.sin(angle) * radius
              );
            }
          });
          break;
          
        case STAGE_INSIGHTS: // Enhanced arrow or trend line with highlight particles forming a comet
          particles.forEach((p, i) => {
            if (p.isHighlight) {
              // Highlights form a comet head at the arrow tip
              const arrowHeadX = centerX;
              const arrowHeadY = centerY - maxRadius * 0.4;
              const cometRadius = maxRadius * 0.2;
              const cometAngle = Math.random() * Math.PI * 2;
              p.setTarget(
                arrowHeadX + Math.cos(cometAngle) * cometRadius * Math.random(),
                arrowHeadY + Math.sin(cometAngle) * cometRadius * Math.random()
              );
            } else {
              // Regular particles form the arrow
              const normalizedI = particles.filter(dp => !dp.isHighlight).indexOf(p) / 
                            particles.filter(dp => !dp.isHighlight).length;
              
              if (normalizedI < 0.4) {
                // Arrow shaft with slight curve
                const y = centerY + maxRadius * 0.6 - normalizedI * maxRadius * 1.5;
                const xOffset = (Math.random() - 0.5) * (maxRadius * 0.15);
                // Add subtle curve to the shaft
                const curveAmount = maxRadius * 0.1 * Math.sin(normalizedI * Math.PI);
                p.setTarget(centerX + xOffset + curveAmount, y);
              } else {
                // Arrow head with enhanced shape
                const angle = ((normalizedI - 0.4) / 0.6) * Math.PI - Math.PI / 2;
                const radius = maxRadius * 0.5;
                p.setTarget(
                  centerX + Math.cos(angle) * radius,
                  centerY - maxRadius * 0.3 + Math.sin(angle) * radius
                );
              }
            }
          });
          break;
      }
    }
    
    // Create particles with varied distribution
    const numberOfParticles = 120; // Increased base particle count
    const numberOfHighlightParticles = 20; // New highlight particles for visual interest
    const particles: any[] = [];
    const highlightParticles: any[] = [];
    
    // Regular particles
    for (let i = 0; i < numberOfParticles; i++) {
      // Distribution favoring higher data values for more vibrant visuals
      const dataValue = Math.pow(Math.random(), 0.8) * 100;
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      particles.push(new Particle(x, y, dataValue, false));
    }
    
    // Highlight particles
    for (let i = 0; i < numberOfHighlightParticles; i++) {
      // Highlight particles have more high data values
      const dataValue = Math.pow(Math.random(), 0.5) * 100;
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      const particle = new Particle(x, y, dataValue, true);
      highlightParticles.push(particle);
      particles.push(particle); // Add to main array as well
    }
    
    particlesRef.current = particles;
    highlightParticlesRef.current = highlightParticles;
    generateShapeForStage(stage, particles, canvas.width, canvas.height);
    
    // Animation loop with enhanced visual effects
    const animate = (timestamp: number) => {
      if (!previousTimeRef.current) previousTimeRef.current = timestamp;
      const deltaTime = timestamp - previousTimeRef.current;
      previousTimeRef.current = timestamp;
      
      // Update stage time and check for transitions
      stageTimeRef.current += deltaTime;
      if (stageTimeRef.current > 8000) { // Increased duration to 8 seconds per stage for better viewing
        stageTimeRef.current = 0;
        stageTransitionRef.current = true;
        
        // Cycle through stages
        const nextStage = (stage + 1) % 4;
        setStage(nextStage);
        
        // If transitioning back to data collection, trigger explosion effect
        if (nextStage === STAGE_DATA_COLLECTION) {
          particles.forEach(p => p.explode());
        }
        
        // Generate new shape for the next stage
        generateShapeForStage(nextStage, particles, canvas.width, canvas.height);
        
        // Reset transition flag after a delay
        setTimeout(() => {
          stageTransitionRef.current = false;
        }, 1200); // Longer transition time
      }
      
      // Enhanced motion blur effect with dynamic opacity based on stage
      const fadeOpacity = stage === STAGE_DATA_COLLECTION ? 0.1 : 0.08;
      ctx.fillStyle = `rgba(10, 15, 30, ${fadeOpacity})`;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // Draw connection lines with enhanced effects
      if (stage === STAGE_ANALYSIS || stage === STAGE_VISUALIZATION) {
        // First draw connections for regular particles
        for (let a = 0; a < particles.length; a++) {
          if (particles[a].isHighlight) continue; // Skip highlight particles in main grid
          
          for (let b = a + 1; b < particles.length; b++) {
            if (particles[b].isHighlight) continue;
            
            const dx = particles[a].x - particles[b].x;
            const dy = particles[a].y - particles[b].y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            // Enhanced connection distance based on stage
            const maxDistance = stage === STAGE_ANALYSIS ? 150 : 130;
            
            if (distance < maxDistance) {
              // Mix colors from both particles for more dynamic connections
              const hue1 = particles[a].hue;
              const hue2 = particles[b].hue;
              const avgHue = (hue1 + hue2) / 2;
              
              const opacity = 0.2 * (1 - distance / maxDistance);
              ctx.strokeStyle = `hsla(${avgHue}, 70%, 60%, ${opacity})`;
              
              // Line width based on particle data values
              const combinedValue = (particles[a].dataValue + particles[b].dataValue) / 200;
              ctx.lineWidth = 0.3 + combinedValue * 0.4;
              
              ctx.beginPath();
              ctx.moveTo(particles[a].x, particles[a].y);
              ctx.lineTo(particles[b].x, particles[b].y);
              ctx.stroke();
            }
          }
        }
        
        // Then draw special connections for highlight particles - brighter and more visible
        highlightParticles.forEach(hp => {
          // Find closest regular particle for special connection
          let closestDistance = Infinity;
          let closestParticle: Particle | null = null;
          
          particles.forEach(p => {
            if (!p.isHighlight) {
              const dx = hp.x - p.x;
              const dy = hp.y - p.y;
              const distance = Math.sqrt(dx * dx + dy * dy);
              
              if (distance < closestDistance && distance < 200) {
                closestDistance = distance;
                closestParticle = p;
              }
            }
          });
          
          // Draw special highlight connection
          if (closestParticle) {
            const gradient = ctx.createLinearGradient(
              hp.x, hp.y,
              closestParticle.x, closestParticle.y
            );
            gradient.addColorStop(0, `hsla(${hp.hue}, 100%, 70%, 0.7)`);
            gradient.addColorStop(1, `hsla(${closestParticle.hue}, 100%, 60%, 0)`);
            
            ctx.strokeStyle = gradient;
            ctx.lineWidth = 1.5;
            ctx.beginPath();
            ctx.moveTo(hp.x, hp.y);
            ctx.lineTo(closestParticle.x, closestParticle.y);
            ctx.stroke();
          }
        });
      }
      
      // Update and draw particles
      particles.forEach(p => {
        p.update(timestamp, stage, canvas.width, canvas.height, particles, mousePosition.current);
        p.draw(ctx, timestamp);
      });
      
      // Request next frame
      requestRef.current = requestAnimationFrame(animate);
    };
    
    requestRef.current = requestAnimationFrame(animate);
    
    // Cleanup
    return () => {
      if (requestRef.current) {
        cancelAnimationFrame(requestRef.current);
      }
      window.removeEventListener('resize', resizeCanvas);
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseleave', handleMouseLeave);
    };
  }, [stage]);
  
  return (
    <canvas 
      ref={canvasRef} 
      className={`absolute top-0 left-0 w-full h-full -z-10 ${className}`}
      style={{ 
        background: 'radial-gradient(circle at 50% 50%, rgba(15,23,42,1) 0%, rgba(10,15,30,0.98) 60%, rgba(8,13,28,1) 100%)',
        backdropFilter: 'blur(120px)', // Apply blur effect for depth
      }}
    />
  );
};

export default AnimatedBackground;
