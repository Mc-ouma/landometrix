'use client';

import { useState, useEffect, memo } from 'react';
import Image from 'next/image';

interface OptimizedImageProps {
  src: string;
  alt: string;
  width: number;
  height: number;
  className?: string;
  priority?: boolean;
  quality?: number;
  sizes?: string;
  lowQualitySrc?: string;
  fallbackSrc?: string;
}

/**
 * Optimized image component with improved loading behavior
 * - Lazy loads images by default
 * - Handles loading states
 * - Uses Next.js Image component for optimization
 * - Provides low-quality image placeholder support
 * - Handles errors gracefully
 */
const OptimizedImage = memo(({
  src,
  alt,
  width,
  height,
  className = '',
  priority = false,
  quality = 85,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  lowQualitySrc,
  fallbackSrc
}: OptimizedImageProps) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [isIntersecting, setIsIntersecting] = useState(false);
  const [imageSrc, setImageSrc] = useState(src);
  const [hasError, setHasError] = useState(false);
  
  // Use Intersection Observer for smarter loading behavior
  useEffect(() => {
    // Skip for priority images that should load immediately
    if (priority) {
      setIsIntersecting(true);
      return;
    }
    
    // Set up intersection observer
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          setIsIntersecting(true);
          observer.disconnect();
        }
      },
      { rootMargin: "200px" } // Load images when they're within 200px of viewport
    );
    
    // Reference to image container
    const element = document.getElementById(`img-container-${imageSrc.replace(/\W/g, '')}`);
    if (element) {
      observer.observe(element);
    }
    
    return () => observer.disconnect();
  }, [priority, imageSrc]);

  // Handle image loading error
  const handleError = () => {
    if (!hasError && fallbackSrc) {
      setHasError(true);
      setImageSrc(fallbackSrc);
    }
  };

  // Determine if image should load
  const shouldLoad = priority || isIntersecting;

  return (
    <div 
      id={`img-container-${imageSrc.replace(/\W/g, '')}`} 
      className={`${className} ${isLoaded ? '' : 'bg-slate-200/10 animate-pulse'} relative overflow-hidden`}
      style={{ width: '100%', height: 'auto', aspectRatio: `${width}/${height}` }}
    >
      {/* Low quality image placeholder */}
      {lowQualitySrc && !isLoaded && shouldLoad && (
        <Image
          src={lowQualitySrc}
          alt=""
          width={width}
          height={height}
          className="absolute inset-0 w-full h-full blur-md"
          aria-hidden="true"
        />
      )}
      
      {shouldLoad && (
        <Image
          src={imageSrc}
          alt={alt}
          width={width}
          height={height}
          quality={quality}
          className={`${isLoaded ? 'opacity-100' : 'opacity-0'} transition-opacity duration-500`}
          onLoad={() => setIsLoaded(true)}
          onError={handleError}
          loading={priority ? 'eager' : 'lazy'}
          sizes={sizes}
          priority={priority}
        />
      )}
    </div>
  );
});

OptimizedImage.displayName = 'OptimizedImage';

export default OptimizedImage;
