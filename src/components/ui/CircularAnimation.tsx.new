'use client';

import { useEffect, useRef, useState, useCallback, memo } from 'react';

type DataPoint = {
  label: string;
  value: number;
  category?: string;
};

type CircularAnimationProps = {
  width?: number;
  height?: number;
  colorScheme?: 'blue' | 'purple' | 'teal' | 'amber';
  speed?: number;
  density?: number;
  data?: DataPoint[];
  showLabels?: boolean;
  title?: string;
  subtitle?: string;
};

// Sample data if none is provided - defined outside component to prevent recreation
const DEFAULT_DATA: DataPoint[] = [
  { label: 'Revenue', value: 85, category: 'Financial' },
  { label: 'Customer Satisfaction', value: 92, category: 'Customer' },
  { label: 'Market Growth', value: 67, category: 'Market' },
  { label: 'Innovation', value: 78, category: 'R&D' },
  { label: 'Productivity', value: 71, category: 'Operations' },
  { label: 'Employee Engagement', value: 83, category: 'HR' },
  { label: 'Cost Efficiency', value: 65, category: 'Financial' },
];

// Color schemes defined as constants outside the component
const COLOR_SCHEMES = {
  blue: {
    baseColor: 144,
    colorRange: 255 - 144,
    bgGradient: ['#001233', '#023e8a'],
  },
  purple: {
    baseColor: 120,
    colorRange: 255 - 120,
    bgGradient: ['#240046', '#7b2cbf'],
  },
  teal: {
    baseColor: 130,
    colorRange: 255 - 130,
    bgGradient: ['#005f73', '#0a9396'],
  },
  amber: {
    baseColor: 150,
    colorRange: 255 - 150,
    bgGradient: ['#7f5539', '#dda15e'],
  },
};

// Constants used in animations
const TP = 2 * Math.PI;

const CircularAnimation = ({
  width = 800,
  height = 800,
  colorScheme = 'blue',
  speed = 1,
  density = 1,
  data = DEFAULT_DATA,
  showLabels = true,
  title = 'Performance Metrics',
  subtitle = 'Animated data visualization',
}: CircularAnimationProps) => {
  // Refs instead of state for performance-critical values that don't need rerenders
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number | null>(null);
  const ttRef = useRef<number>(0);
  const circlesRef = useRef<any[]>([]);
  const colorRef = useRef<any>(null);
  const dataRef = useRef<DataPoint[]>(data);
  const currentSchemeRef = useRef(COLOR_SCHEMES[colorScheme]);
  
  // State for UI elements that need rendering updates
  const [isPlaying, setIsPlaying] = useState(true);
  const [activeDataPoint, setActiveDataPoint] = useState<DataPoint | null>(null);
  const [hoveredCircle, setHoveredCircle] = useState<number | null>(null);
  
  // Update refs when props change
  useEffect(() => {
    dataRef.current = data;
    currentSchemeRef.current = COLOR_SCHEMES[colorScheme];
    
    // Initialize circles if they don't exist yet
    if (circlesRef.current.length === 0) {
      initializeCircles();
    }
  }, [data, colorScheme, density]);
  
  // Initialize animation circles
  const initializeCircles = useCallback(() => {
    const CSIZE = Math.min(width, height) / 2;
    const circleCount = Math.floor(15 * density);
    
    circlesRef.current = Array.from({ length: circleCount }, () => {
      const r = 0.1 * CSIZE + 0.8 * CSIZE * Math.random();
      const theta = TP * Math.random();
      const dTheta = 0.002 + 0.002 * Math.random();
      const size = 0.05 * CSIZE + 0.15 * CSIZE * Math.pow(Math.random(), 2);
      const dataIndex = Math.floor(Math.random() * data.length);
      const value = data[dataIndex].value;
      
      return {
        r,
        theta,
        dTheta,
        size,
        dataIndex,
        value,
        active: false,
      };
    });
  }, [width, height, density, data]);
  
  // Draw the animation frame
  const drawFrame = useCallback((ctx: CanvasRenderingContext2D) => {
    const CSIZE = Math.min(width, height) / 2;
    ctx.clearRect(0, 0, width, height);
    
    // Draw background gradient
    const gradient = ctx.createRadialGradient(
      width / 2, height / 2, 0,
      width / 2, height / 2, CSIZE * 1.5
    );
    gradient.addColorStop(0, currentSchemeRef.current.bgGradient[0]);
    gradient.addColorStop(1, currentSchemeRef.current.bgGradient[1]);
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    
    // Update time
    ttRef.current += 0.01 * speed;
    
    // Draw circles
    circlesRef.current.forEach((circle, i) => {
      circle.theta += circle.dTheta * speed;
      if (circle.theta > TP) circle.theta -= TP;
      
      const x = width / 2 + circle.r * Math.cos(circle.theta);
      const y = height / 2 + circle.r * Math.sin(circle.theta);
      
      // Determine if hovered
      const isHovered = hoveredCircle === i;
      
      // Calculate color based on value
      const baseColor = currentSchemeRef.current.baseColor;
      const colorRange = currentSchemeRef.current.colorRange;
      const hue = baseColor + colorRange * (circle.value / 100);
      
      // Draw circle
      ctx.beginPath();
      ctx.arc(x, y, circle.size * (isHovered ? 1.2 : 1), 0, TP);
      ctx.fillStyle = isHovered 
        ? `hsla(${hue}, 100%, 70%, 0.8)`
        : `hsla(${hue}, 80%, 50%, 0.6)`;
      ctx.fill();
      
      // Draw label if needed
      if (showLabels && (isHovered || circle.active)) {
        const dataPoint = dataRef.current[circle.dataIndex];
        ctx.font = 'bold 14px Arial';
        ctx.fillStyle = 'white';
        ctx.textAlign = 'center';
        ctx.fillText(dataPoint.label, x, y - circle.size - 10);
        ctx.font = '12px Arial';
        ctx.fillText(`${dataPoint.value}%`, x, y - circle.size - 25);
      }
    });
    
    // Draw title and subtitle
    if (title) {
      ctx.font = 'bold 24px Arial';
      ctx.fillStyle = 'white';
      ctx.textAlign = 'center';
      ctx.fillText(title, width / 2, 40);
    }
    
    if (subtitle) {
      ctx.font = '16px Arial';
      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
      ctx.textAlign = 'center';
      ctx.fillText(subtitle, width / 2, 70);
    }
    
    // Continue animation if playing
    if (isPlaying) {
      animationRef.current = requestAnimationFrame(() => drawFrame(ctx));
    }
  }, [width, height, speed, hoveredCircle, showLabels, isPlaying, title, subtitle]);
  
  // Handle mouse events
  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!canvasRef.current) return;
    
    const rect = canvasRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    const centerX = width / 2;
    const centerY = height / 2;
    
    // Check if mouse is over any circle
    let hoveredIndex = null;
    for (let i = 0; i < circlesRef.current.length; i++) {
      const circle = circlesRef.current[i];
      const circleX = centerX + circle.r * Math.cos(circle.theta);
      const circleY = centerY + circle.r * Math.sin(circle.theta);
      
      const dx = circleX - x;
      const dy = circleY - y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      
      if (distance < circle.size) {
        hoveredIndex = i;
        const dataPoint = dataRef.current[circle.dataIndex];
        setActiveDataPoint(dataPoint);
        break;
      }
    }
    
    setHoveredCircle(hoveredIndex);
    if (hoveredIndex === null) {
      setActiveDataPoint(null);
    }
  }, [width, height]);
  
  // Toggle play/pause
  const togglePlay = useCallback(() => {
    setIsPlaying(prev => {
      const newState = !prev;
      
      if (newState && canvasRef.current) {
        const ctx = canvasRef.current.getContext('2d');
        if (ctx) {
          drawFrame(ctx);
        }
      }
      
      return newState;
    });
  }, [drawFrame]);
  
  // Initialize animation
  useEffect(() => {
    if (!canvasRef.current) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Set canvas size and scale for high DPI displays
    const pixelRatio = window.devicePixelRatio || 1;
    canvas.width = width * pixelRatio;
    canvas.height = height * pixelRatio;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(pixelRatio, pixelRatio);
    
    // Initialize circles
    initializeCircles();
    
    // Start animation
    if (isPlaying) {
      drawFrame(ctx);
    }
    
    // Cleanup
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [width, height, isPlaying, initializeCircles, drawFrame]);
  
  return (
    <div className="relative" style={{ width, height }}>
      <canvas
        ref={canvasRef}
        onMouseMove={handleMouseMove}
        className="cursor-pointer"
        style={{ width, height }}
      />
      
      {/* Controls */}
      <div className="absolute bottom-4 left-4 flex space-x-4">
        <button
          onClick={togglePlay}
          className="bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full p-2 transition-colors"
        >
          {isPlaying ? (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6m-9-9h14a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2z" />
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          )}
        </button>
      </div>
      
      {/* Info panel */}
      {activeDataPoint && (
        <div className="absolute top-4 right-4 bg-black bg-opacity-50 p-4 rounded-md text-white">
          <h3 className="font-bold text-lg">{activeDataPoint.label}</h3>
          <p className="text-xl">{activeDataPoint.value}%</p>
          {activeDataPoint.category && (
            <p className="text-sm text-gray-300">{activeDataPoint.category}</p>
          )}
        </div>
      )}
    </div>
  );
};

// Export memoized component to prevent unnecessary re-renders
export default memo(CircularAnimation);
