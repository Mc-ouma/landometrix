'use client';

import Link from 'next/link';
import { useState, useCallback, memo, useEffect, useRef } from 'react';
import { usePathname } from 'next/navigation';
import { motion } from 'framer-motion';
import MobileMenu from './MobileMenu';

// Define navigation links outside component to prevent recreation on each render
const NAV_LINKS = [
  { href: '/', label: 'Home' },
  { href: '/services', label: 'Services' },
  { href: '/about', label: 'About' },
  { href: '/contact', label: 'Contact' }
];

// CSS constants with enhanced styling
const DESKTOP_LINK_CLASS = "relative text-gray-200 hover:text-white font-medium px-4 py-2 transition-all duration-300 overflow-hidden group flex items-center";
const MOBILE_LINK_CLASS = "block text-gray-200 hover:text-white py-4 px-6 text-lg font-medium transition-all duration-300 relative";

// Enhanced animated icons for menu toggle
const CloseIcon = memo(() => (
  <motion.svg 
    xmlns="http://www.w3.org/2000/svg" 
    className="h-6 w-6" 
    fill="none" 
    viewBox="0 0 24 24" 
    stroke="currentColor"
    initial={{ rotate: -90, opacity: 0 }}
    animate={{ rotate: 0, opacity: 1 }}
    exit={{ rotate: 90, opacity: 0 }}
    transition={{ duration: 0.2 }}
  >
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
  </motion.svg>
));
CloseIcon.displayName = 'CloseIcon';

const MenuIcon = memo(() => (
  <motion.svg 
    xmlns="http://www.w3.org/2000/svg" 
    className="h-6 w-6" 
    fill="none" 
    viewBox="0 0 24 24" 
    stroke="currentColor"
    initial={{ opacity: 0.5 }}
    animate={{ opacity: 1 }}
    transition={{ duration: 0.2 }}
  >
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
  </motion.svg>
));
MenuIcon.displayName = 'MenuIcon';

// Enhanced GetStarted button with gradient, shimmer effect and hover effects
const GetStartedButton = memo(({ isMobile = false, onClick = undefined }: { isMobile?: boolean, onClick?: () => void }) => (
  <motion.div 
    whileHover={{ scale: 1.03 }}
    whileTap={{ scale: 0.97 }}
    transition={{ type: "spring", stiffness: 400, damping: 15 }}
    className={`${isMobile ? 'w-full' : 'inline-block'}`}
  >
    <Link 
      href="/contact" 
      className={`
        ${isMobile ? 'block w-full text-center mt-6' : 'inline-flex items-center'} 
        relative bg-gradient-to-r from-blue-500 via-teal-400 to-blue-500 hover:from-blue-600 hover:via-teal-500 hover:to-blue-600
        bg-size-200 animate-shimmer
        text-white px-6 py-2.5 rounded-lg transition-all duration-300
        font-medium shadow-lg hover:shadow-xl hover:shadow-blue-500/25
        ${isMobile ? 'text-lg' : ''}
        overflow-hidden group
      `}
      onClick={onClick}
    >
      <span className="relative z-10 flex items-center justify-center">
        <span>Get Started</span>
        <motion.svg 
          xmlns="http://www.w3.org/2000/svg" 
          className="h-4 w-4 ml-2 opacity-70 group-hover:opacity-100 group-hover:translate-x-0.5 transition-all duration-300" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
        </motion.svg>
      </span>
      <span className="absolute inset-0 overflow-hidden rounded-lg z-0 before:absolute before:inset-0 before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent before:translate-x-[-100%] group-hover:before:translate-x-[100%] before:transition-transform before:duration-700 before:ease-in-out"></span>
      <span className="absolute inset-x-0 bottom-0 h-0.5 bg-gradient-to-r from-transparent via-white/50 to-transparent translate-y-0.5 group-hover:translate-y-0 transition-transform z-10"></span>
    </Link>
  </motion.div>
));
GetStartedButton.displayName = 'GetStartedButton';

const Header = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  const pathname = usePathname();
  const headerRef = useRef<HTMLElement>(null);
  
  // Track scroll position for header transparency effect and scroll progress
  useEffect(() => {
    const handleScroll = () => {
      // Handle header background transparency
      if (window.scrollY > 20) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
      
      // Calculate scroll progress percentage
      const totalHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = Math.min(Math.max((window.scrollY / totalHeight) * 100, 0), 100);
      setScrollProgress(progress);
    };
    
    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Check on initial load
    
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);
  
  // Memoized toggle handler
  const toggleMenu = useCallback(() => {
    setIsMenuOpen(prev => !prev);
    // For debug purposes
    console.log("Menu toggled:", !isMenuOpen);
  }, [isMenuOpen]);
  
  // Memoized close handler
  const closeMenu = useCallback(() => setIsMenuOpen(false), []);
  
  // Effect to close menu when route changes
  useEffect(() => {
    if (isMenuOpen) setIsMenuOpen(false);
  }, [pathname, isMenuOpen]);

  // Add body class to prevent scrolling when mobile menu is open
  useEffect(() => {
    if (isMenuOpen) {
      document.body.classList.add('overflow-hidden');
    } else {
      document.body.classList.remove('overflow-hidden');
    }
    return () => document.body.classList.remove('overflow-hidden');
  }, [isMenuOpen]);

  return (
    <motion.header 
      ref={headerRef}
      className={`fixed w-full z-[100] transition-all duration-300 ${
        isScrolled
          ? "bg-slate-900/85 backdrop-blur-lg shadow-lg shadow-black/10 py-3 border-b border-white/5" 
          : "bg-transparent py-5"
      } px-6 md:px-12`}
      initial={{ y: -100, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ 
        type: "spring", 
        stiffness: 100, 
        damping: 20,
        delay: 0.2
      }}
    >
      {/* Scroll Progress Bar */}
      <div className="absolute top-0 left-0 h-0.5 bg-gradient-to-r from-blue-500 via-teal-400 to-blue-500 z-50 transition-all duration-150"
        style={{ width: `${scrollProgress}%` }} 
      />
      <div className="max-w-7xl mx-auto flex items-center justify-between">
        <Link href="/" className="group flex items-center gap-2 z-20 no-underline">
          <div className="relative">
            {/* Animated background glow effect */}
            <motion.div 
              className="absolute -inset-2 rounded-lg bg-gradient-to-r from-blue-400/20 via-teal-300/20 to-blue-400/20 opacity-0 group-hover:opacity-100 blur-lg transition-opacity duration-300"
              animate={{
                background: ['linear-gradient(90deg, rgba(59,130,246,0.2) 0%, rgba(45,212,191,0.2) 50%, rgba(59,130,246,0.2) 100%)'],
                scale: [1, 1.05, 1]
              }}
              transition={{ 
                background: { duration: 2, repeat: Infinity, ease: "linear" },
                scale: { duration: 3, repeat: Infinity, ease: "easeInOut" }
              }}
            />
            
            {/* Logo text with enhanced animations */}
            <motion.div 
              className="flex items-center"
              whileHover={{ scale: 1.03 }}
              transition={{ type: "spring", stiffness: 400, damping: 10 }}
            >
              <span className="relative text-2xl font-bold z-10">
                {/* Logo text with animated gradient */}
                <motion.span 
                  className="bg-gradient-to-r from-blue-400 to-teal-300 bg-clip-text text-transparent"
                  animate={{
                    backgroundPosition: ['0% 50%', '100% 50%', '0% 50%']
                  }}
                  transition={{ duration: 5, repeat: Infinity, ease: "easeInOut" }}
                  style={{ backgroundSize: '200% 100%' }}
                >
                  Landometrix
                </motion.span>
                
                {/* Subtle shimmer effect overlay */}
                <span className="absolute inset-0 w-full bg-gradient-to-r from-transparent via-white/20 to-transparent bg-[length:200%_100%] animate-shimmer" />
              </span>
            </motion.div>
            
            {/* Decorative geometric shapes */}
            <div className="absolute -top-1.5 -left-3 w-2 h-2 bg-blue-400 rounded-full opacity-0 group-hover:opacity-70 transition-opacity duration-300 delay-100" />
            <div className="absolute -bottom-1 -right-3 w-2 h-2 bg-teal-300 rounded-full opacity-0 group-hover:opacity-70 transition-opacity duration-300 delay-200" />
          </div>
        </Link>

        {/* Desktop Navigation */}
        <motion.nav 
          className="hidden md:flex items-center space-x-3"
          variants={{
            hidden: { opacity: 0, y: -10 },
            visible: {
              opacity: 1,
              y: 0,
              transition: {
                staggerChildren: 0.1,
                delayChildren: 0.3
              }
            }
          }}
          initial="hidden"
          animate="visible"
        >
          {NAV_LINKS.map(({ href, label }) => {
            const isActive = pathname === href;
            return (
              <motion.div
                key={href}
                variants={{
                  hidden: { opacity: 0, y: -10 },
                  visible: { opacity: 1, y: 0 }
                }}
              >
                <Link 
                  href={href} 
                  className={`${DESKTOP_LINK_CLASS} ${isActive ? 'text-white font-semibold' : ''}`}
                >
                  <span className="relative z-10">{label}</span>
                  
                  {/* Active indicator with enhanced animation */}
                  {isActive ? (
                    <motion.span 
                      className="absolute bottom-0 left-0 h-0.5 bg-gradient-to-r from-blue-400 to-teal-300 w-full rounded-full shadow-[0_0_8px_rgba(45,212,191,0.5)]"
                      layoutId="navIndicator"
                      transition={{ type: "spring", stiffness: 300, damping: 30 }}
                    />
                  ) : (
                    <span className="absolute bottom-0 left-0 w-full h-[1px] bg-gradient-to-r from-blue-400/0 via-teal-300/40 to-blue-400/0 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 ease-out" />
                  )}
                  
                  {/* Hover glow effect */}
                  <span className="absolute inset-0 bg-white/5 opacity-0 group-hover:opacity-100 rounded-md transition-opacity duration-200" />
                </Link>
              </motion.div>
            );
          })}
          
          <motion.div 
            className="ml-4 inline-block"
            variants={{
              hidden: { opacity: 0, y: -10 },
              visible: { opacity: 1, y: 0 }
            }}
          >
            <GetStartedButton />
          </motion.div>
        </motion.nav>

        <div className="flex items-center gap-4 md:hidden z-40">
          {/* Mobile Menu Button */}
          <motion.button 
            className={`text-white p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400/50 relative ${
              isMenuOpen ? 'bg-white/20 backdrop-blur-sm' : 'bg-slate-800/40 hover:bg-slate-700/50 backdrop-blur-sm'
            } cursor-pointer`}
            onClick={toggleMenu}
            aria-label="Toggle menu"
            aria-expanded={isMenuOpen}
            whileTap={{ scale: 0.9 }}
            transition={{ type: "spring", stiffness: 400, damping: 17 }}
          >
            <div className="relative">
              <motion.div 
                className="absolute -inset-2 rounded-full bg-gradient-to-r from-blue-400/10 to-teal-300/10 opacity-0 blur-md"
                animate={{ opacity: isMenuOpen ? 0.8 : 0 }}
                transition={{ duration: 0.3 }}
              />
              {isMenuOpen ? <CloseIcon /> : <MenuIcon />}
            </div>
          </motion.button>
        </div>
      </div>

      {/* Full-screen Mobile Navigation with enhanced animation */}
      {typeof window !== 'undefined' ? createPortal(
        <AnimatePresence>
          {isMenuOpen && (
            <motion.div
              className="fixed inset-0 bg-gradient-to-b from-slate-900 to-slate-800 z-[90] md:hidden flex flex-col justify-center items-center overflow-hidden"
              key="mobile-menu"
              initial={{ opacity: 0, clipPath: "circle(0% at calc(100% - 2.5rem) 2.5rem)" }}
              animate={{ 
                opacity: 1, 
                clipPath: "circle(150% at calc(100% - 2.5rem) 2.5rem)" 
              }}
              exit={{ 
                opacity: 0, 
                clipPath: "circle(0% at calc(100% - 2.5rem) 2.5rem)" 
              }}
              transition={{ 
                duration: 0.5,
                ease: [0.22, 1, 0.36, 1]
              }}
            >
              {/* Decorative Elements */}
              <div className="absolute top-20 left-10 w-64 h-64 rounded-full bg-blue-500/5 blur-3xl" />
              <div className="absolute bottom-20 right-10 w-80 h-80 rounded-full bg-teal-500/5 blur-3xl" />
              <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[200%] h-32 bg-gradient-to-r from-blue-500/5 via-transparent to-teal-500/5 blur-3xl -rotate-45" />

              <motion.nav 
                className="flex flex-col items-center justify-center space-y-8 pt-20 pb-10 w-full max-w-sm z-[91] relative"
                initial="closed"
                animate="open"
                variants={{
                  open: {
                    transition: {
                      staggerChildren: 0.07,
                      delayChildren: 0.2
                    }
                  },
                  closed: {
                    transition: {
                      staggerChildren: 0.05,
                      staggerDirection: -1
                    }
                  }
                }}
              >
                {NAV_LINKS.map(({ href, label }, index) => {
                  const isActive = pathname === href;
                  return (
                    <motion.div
                      key={href}
                      variants={{
                        open: {
                          y: 0,
                          opacity: 1,
                          transition: {
                            y: { stiffness: 1000, velocity: -100 }
                          }
                        },
                        closed: {
                          y: 50,
                          opacity: 0,
                          transition: {
                            y: { stiffness: 1000 }
                          }
                        }
                      }}
                      className="w-full text-center"
                    >
                      <Link 
                        href={href} 
                        className={`${MOBILE_LINK_CLASS} ${isActive ? 'text-white relative' : ''} inline-flex items-center justify-center w-full`}
                        onClick={closeMenu}
                      >
                        {label}
                        {isActive && (
                          <motion.span 
                            className="absolute bottom-0 left-1/2 -translate-x-1/2 h-0.5 bg-gradient-to-r from-blue-400 to-teal-300 w-12 rounded-full shadow-[0_0_8px_rgba(45,212,191,0.5)]"
                            layoutId="mobileNavIndicator"
                          />
                        )}
                      </Link>
                    </motion.div>
                  );
                })}
                
                <motion.div
                  variants={{
                    open: {
                      y: 0,
                      opacity: 1,
                      transition: {
                        y: { stiffness: 1000, velocity: -100 },
                        delay: 0.1
                      }
                    },
                    closed: {
                      y: 50,
                      opacity: 0,
                      transition: {
                        y: { stiffness: 1000 }
                      }
                    }
                  }}
                  className="w-full px-6"
                >
                  <GetStartedButton isMobile={true} onClick={closeMenu} />
                </motion.div>
              </motion.nav>
            </motion.div>
          )}
        </AnimatePresence>,
        document.body
      )}
    </motion.header>
  );
};

// Add displayName for better debugging and DevTools experience
Header.displayName = 'Header';

// Export memoized component to prevent unnecessary re-renders from parent components
export default memo(Header);